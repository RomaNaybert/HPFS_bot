import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
from langchain_core.messages import HumanMessage, SystemMessage
import re
import ssl
import requests
import base64
import json
from gigachat import GigaChat
import io
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
from aiogram.types import InputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from aiogram.types import Message
from PIL import Image
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision import models, datasets

ssl_context = ssl.create_default_context()
ssl_context.load_verify_locations("sberbank.pem")
# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
TOKEN = "7610036504:AAFA2i6NH2wHu0pH2crJXwgNJnANmGUCtFE"
GIGACHAT_API_KEY = "MmJiM2FmMjMtMjk3NS00ZGVkLWFjNTAtMjIyYTJlOTFlOGM1OmQ5MmM5NDNhLTA1MTQtNDQ0Mi05N2Y1LWI2Zjk5ZDYzN2Q5Mg=="


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

from aiogram import Router

router = Router()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –≤–º–µ—Å—Ç–æ Dispatcher
dp.include_router(router)  # –¢–µ–ø–µ—Ä—å –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

# GigaChat API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
giga = GigaChat(credentials=GIGACHAT_API_KEY, verify_ssl_certs=False)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="‚Ñπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="‚ùì FAQ")],
        [KeyboardButton(text="üõ† –õ–∏–Ω–µ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ê–≤—Ç–æ–ø–æ–ª–∏–≤")],
        [KeyboardButton(text="üå± –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")],
        [KeyboardButton(text="ü™¥ PlantML"), KeyboardButton(text="ü¶† DiseaseML")]
    ],
    resize_keyboard=True
)

plants = {}

# --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
navigation_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prev"),
         InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="next")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
)


# --- –°—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
info_pages = [
    {
        "photo": "–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞-2.png",
        "text": (
            "üìå <b>–ì–∏–¥—Ä–æ–ø–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è</b>\n\n"
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π,"
            "–∏—Å–ø–æ–ª—å–∑—É—é—â–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        ),
    },
    {
        "photo": "–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞-3.png",
        "text": (
            "üéØ <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –∫–ª—é—á–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞</b>\n\n"
            "üë®‚Äçüíº –ó–∞–Ω—è—Ç—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–º —Å–ª–æ–∂–Ω–æ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n"
            "üè° –í–ª–∞–¥–µ–ª—å—Ü—ã –∑–∏–º–Ω–∏—Ö —Å–∞–¥–æ–≤.\n"
            "üå± –§–µ—Ä–º–µ—Ä—ã, —Å—Ç—Ä–µ–º—è—â–∏–µ—Å—è –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é –∫—É–ª—å—Ç—É—Ä.\n\n"
            "‚ö° <b>–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞:</b> –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω–æ–π, –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, "
            "–∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–∑–∏—Ç –∑–∞—Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —É—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏."
        ),
    },
    {
        "photo": "–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞-4.png",
        "text": (
            "üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
            "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n"
            "‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n"
            "‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è"
        ),
    },
    {
        "photo": "–û–±–æ—Ä–æ—Ç - 1-2.png",
        "text": (
            "‚öôÔ∏è <b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "üì° –°–µ–Ω—Å–æ—Ä—ã –∏–∑–º–µ—Ä—è—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.\n"
            "üíß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ–¥–∞—á—É –≤–æ–¥—ã –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤.\n"
            "üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
            "üñºÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ—Ç–æ—Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        ),
    },
    {
        "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 02.17.55.png",
        "text": (
            "üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
            "üìä –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.\n"
        ),
    },
    {
        "photo": "–û–±–æ—Ä–æ—Ç - 1-4.png",
        "text": (
            "üöÄ <b>–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</b>\n\n"
            "üè° <b>–ß–∞—Å—Ç–Ω—ã–µ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n"
            "üåæ <b>–ê–≥—Ä–æ–±–∏–∑–Ω–µ—Å</b> ‚Äî –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—è –≤–æ–¥—ã.\n"
            "üè¢ <b>–û—Ñ–∏—Å—ã –∏ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã</b> ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ ¬´—É–º–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è¬ª.\n"
            "üìö <b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è</b> ‚Äî —É—á–µ–±–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
            "üé¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
            "üìπ <a href='https://disk.yandex.ru/i/xapVnhkaVBrVLw'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ MVP</a>\n"
            "üì¢ <a href='https://t.me/HPFS_by_Roma'>Telegram-–∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞</a>"
        ),
    }
]

val_dir = 'images_val'  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º

data_transforms = {
    'val': transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
    ])
}

try:
    with open('plantnet300K_species_names.json', 'r') as f:
        species_data = json.load(f)
except FileNotFoundError:
    species_data = {}

try:
    image_datasets = {
        'val': datasets.ImageFolder(val_dir, data_transforms['val']),
    }
except FileNotFoundError:
    image_datasets = {'val': None}


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ DiseaseML ===
model_disease = models.resnet50(weights='DEFAULT')
num_disease_ftrs = model_disease.fc.in_features
model_disease.fc = nn.Linear(num_disease_ftrs, 6)
model_disease.load_state_dict(torch.load('disease_model_best_accuracy.pth', map_location=torch.device('cpu')))
model_disease.eval()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model_plant = models.resnet50(weights='DEFAULT')
num_ftrs = model_plant.fc.in_features
model_plant.fc = nn.Linear(num_ftrs, 102)

device = torch.device('cpu')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU
try:
    model_plant.load_state_dict(torch.load('model_best_accuracy.pth', map_location=device))
    model_plant.to(device)
    model_plant.eval()
except FileNotFoundError:
    pass

def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
    ])
    image = transform(image).unsqueeze(0)
    return image

def preprocess_disease_image(image):
    transform = transforms.Compose([
        transforms.Resize((400, 400)),
        transforms.ToTensor(),
    ])
    return transform(image).unsqueeze(0)

# === –ö–ª–∞—Å—Å—ã –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π ===
disease_names = [
    "Leaf Spot",
    "Calcium Deficiency",
    "Leaf Scorch",
    "Leaf Blight",
    "Curly Yellow Virus",
    "Yellow Vein Mosaic"
]

class GigaChatState(StatesGroup):
    waiting_question = State()

async def get_gigachat_token():
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Authorization": f"Basic {AUTH_KEY}",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": "3b151a3d-97fd-4b0f-accc-eeb735364249"
    }
    payload = aiohttp.FormData({"scope": "GIGACHAT_API_PERS"})

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, data=payload, ssl=False) as response:
                if response.status == 200:
                    token_data = await response.json()
                    return token_data.get("access_token", "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    error_text = await response.text()
                    return f"–û—à–∏–±–∫–∞ {response.status}: {error_text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
class InfoState(StatesGroup):
    page = State()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class PlantMLState(StatesGroup):
    waiting_for_photo = State()

class DiseaseMLState(StatesGroup):
    waiting_for_photo = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ HPFS!", reply_markup=main_menu)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü™¥ PlantML" ===
@dp.message(lambda message: message.text == "ü™¥ PlantML")
async def plant_ml(message: types.Message, state: FSMContext):
    await state.set_state(PlantMLState.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ!")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü¶† DiseaseML" ===
@dp.message(lambda message: message.text == "ü¶† DiseaseML")
async def disease_ml(message: types.Message, state: FSMContext):
    await state.set_state(DiseaseMLState.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Å—Ç–∞, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –±–æ–ª–µ–∑–Ω—å!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è PlantML ===
@dp.message(lambda message: message.photo, PlantMLState.waiting_for_photo)
async def handle_plant_photo(message: types.Message, state: FSMContext):
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    photo_info = await bot.get_file(photo_id)
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{photo_info.file_path}"
    response = requests.get(photo_url)
    img = Image.open(io.BytesIO(response.content))

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    image = preprocess_image(img)
    with torch.no_grad():
        outputs = model_plant(image)
        probs = torch.softmax(outputs, dim=1)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        confidence, preds = torch.max(probs, 1)  # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

        predicted_class = preds.item()
        predicted = image_datasets['val'].classes[predicted_class]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏
    plant_info = species_data.get(predicted, {})
    real_name = plant_info.get('name', predicted)  # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
    description = plant_info.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    temperature = plant_info.get('temperature', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    humidity = plant_info.get('humidity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    result_text = (f"üå± –†–∞—Å—Ç–µ–Ω–∏–µ: {real_name}\n"
                   f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                   f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                   f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                   f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {confidence.item() * 100:.2f}%")  # –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%

    await message.answer(result_text)
    await state.clear()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è DiseaseML ===
@dp.message(lambda message: message.photo, DiseaseMLState.waiting_for_photo)
async def handle_disease_photo(message: types.Message, state: FSMContext):
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–æ–ª–µ–∑–Ω—å...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    photo_info = await bot.get_file(photo_id)
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{photo_info.file_path}"
    response = requests.get(photo_url)
    img = Image.open(io.BytesIO(response.content))

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏
    image = preprocess_disease_image(img)
    with torch.no_grad():
        outputs = model_disease(image)
        probs = torch.softmax(outputs, dim=1)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        confidence, preds = torch.max(probs, 1)  # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

        predicted_disease = disease_names[preds.item()]

    result_text = (f"ü¶† –ë–æ–ª–µ–∑–Ω—å: {predicted_disease}\n"
                   f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {confidence.item() * 100:.2f}%")  # –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%

    await message.answer(result_text)
    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
@dp.message(lambda message: message.text == "üìú –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def send_main_info(message: types.Message, state: FSMContext):
    await state.set_state(InfoState.page)
    await state.update_data(page=0)
    data = info_pages[0]
    photo = types.FSInputFile(data["photo"])
    await message.answer_photo(photo, caption=data["text"], reply_markup=navigation_kb, parse_mode="HTML")


@dp.callback_query(lambda call: call.data in ["prev", "next", "main_menu"])
async def paginate_info(call: types.CallbackQuery, state: FSMContext):
    if call.data == "main_menu":
        await state.clear()
        await call.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return

    data = await state.get_data()
    page = data.get("page", 0)

    if call.data == "next":
        page = (page + 1) % len(info_pages)
    else:
        page = (page - 1) % len(info_pages)

    await state.update_data(page=page)
    new_data = info_pages[page]
    photo = types.FSInputFile(new_data["photo"])

    await call.message.edit_media(InputMediaPhoto(media=photo, caption=new_data["text"], parse_mode="HTML"), reply_markup=navigation_kb)


# === –õ–ò–ù–ï–ô–ö–ê –£–°–¢–†–û–ô–°–¢–í ===
@dp.message(lambda message: message.text == "üõ† –õ–∏–Ω–µ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ê–≤—Ç–æ–ø–æ–ª–∏–≤")
async def device_list(message: types.Message):
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–∏–Ω–µ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    image_path = "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.14.35.png"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–Ω–µ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    description = (
        "üîß <b>–õ–∏–Ω–µ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n\n"
        "üíß <b>–ê–≤—Ç–æ–ø–æ–ª–∏–≤</b> ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –Ω–µ –Ω—É–∂–Ω—ã –≥—Ä–æ–º–æ–∑–¥–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã, –Ω–æ –≤–∞–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        "üí¶ <b>–ê–≤—Ç–æ–ø–æ–ª–∏–≤ Lite</b> ‚Äî —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞—Å–∞–∂–¥–µ–Ω–∏–π. –û—Å–Ω–∞—â–µ–Ω –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–ª–∏–≤ –±–µ–∑ –ø—Ä–æ–≤–æ–¥–æ–≤\n\n"
        "üìå –≠—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ —É–¥–æ–±–Ω–æ!"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        photo = types.FSInputFile(image_path)
        await message.answer_photo(photo, caption=description, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n{description}", parse_mode="HTML")


# === –ö–ù–û–ü–ö–ê –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
@dp.message(lambda message: message.text == "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)


# --- FAQ ---
@dp.message(lambda message: message.text == "‚ùì FAQ")
async def send_faq(message: types.Message):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "üîπ <b>–ü–æ—á–µ–º—É –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞?</b>\n"
        "üîπ <b>–ö–∞–∫ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ–º?</b>\n"
        "üîπ <b>–ö—Ç–æ –Ω–∞–¥ –≤—Å–µ–º —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞–ª?</b>\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.</i>"
    )
    faq_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—á–µ–º—É –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞?", callback_data="faq1")],
            [InlineKeyboardButton(text="–ö–∞–∫ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ–º?", callback_data="faq2")],
            [InlineKeyboardButton(text="–ö—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?", callback_data="faq3")]
        ]
    )
    await message.answer(faq_text, parse_mode="HTML", reply_markup=faq_kb)

@dp.callback_query(lambda call: call.data.startswith("faq"))
async def faq_answers(call: types.CallbackQuery):
    if call.data == "faq1":
        # –û—Ç–≤–µ—Ç –ø—Ä–æ –¶–ê + —Ñ–æ—Ç–æ
        photo = types.FSInputFile("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.12.00.png")  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        text = ("üìä <b>–ü–æ—á–µ–º—É –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞?</b>\n\n"
                "–ë—ã–ª –ø—Ä–æ–≤–µ–¥—ë–Ω <b>–æ–ø—Ä–æ—Å —Å—Ä–µ–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>. "
                "–ú—ã —É–∑–Ω–∞–ª–∏, –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–∂–Ω—ã, —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã, "
                "–∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø—Ä–∏ —É—Ö–æ–¥–µ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.")
        await call.message.answer_photo(photo, caption=text, parse_mode="HTML")

    elif call.data == "faq2":
        # –û—Ç–≤–µ—Ç –ø—Ä–æ –¢–ì–ö –ø—Ä–æ–µ–∫—Ç–∞
        text = ("üìå <b>–ö–∞–∫ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ–º?</b>\n\n"
                "–í—Å—ë –ø–æ–¥—Ä–æ–±–Ω–æ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ <b>—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –ø—Ä–æ–µ–∫—Ç–∞</b>.\n"
                "–¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ç—á—ë—Ç—ã, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.\n\n"
                "üîó <b>–°—Å—ã–ª–∫–∞:</b> @HPFS_by_Roma")
        await call.message.answer(text, parse_mode="HTML")

    elif call.data == "faq3":
        # –û—Ç–≤–µ—Ç –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É
        text = ("üë®‚Äçüíª <b>–ö—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?</b>\n\n"
                "üìå <b>–ê–≤—Ç–æ—Ä –∏ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –†–æ–º–∞–Ω\n\n"
                "üßë‚Äçüéì <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏:</b>\n"
                "üîπ <b>–ë–∏–∫—Ç–µ–µ–≤ –ê—Ä—Å–µ–Ω–∏–π</b> ‚Äî —Å—Ç—É–¥–µ–Ω—Ç –ù–ò–Ø–£ –ú–ò–§–ò\n"
                "üîπ <b>–ü–ª–æ—Ç–Ω–∏–∫–æ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞</b> ‚Äî –∫.—Ç.–Ω, –¥–æ—Ü–µ–Ω—Ç –Æ–£—Ä–ì–£\n\n"
                "–û–Ω–∏ –ø–æ–º–æ–≥–∞–ª–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –Ω–∞—É—á–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞!")
        await call.message.answer(text, parse_mode="HTML")

    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ "–ø–æ–¥—É–º–∞–π—Ç–µ..." —É –∫–Ω–æ–ø–∫–∏

class PlantState(StatesGroup):
    name = State()
    description = State()
    location = State()
    deleting = State()
    asking_gigachat = State()
    gigachat_question = State()


# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–©–ï–ù–ò–Ø –ö GIGACHAT ===
async def ask_gigachat(question, access_token):
    url = "https://gigachat.devices.sberbank.ru/api/v1/models"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "GigaChat-latest",
        "messages": [{"role": "user", "content": question}]
    }

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE  # ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º SSL

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload, ssl=ssl_context) as response:
            if response.status == 200:
                answer = await response.json()
                return answer["choices"][0]["message"]["content"]
            else:
                return f"–û—à–∏–±–∫–∞: {response.status}"

@dp.message(lambda message: message.text == "üå± –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")
async def plant_catalog(message: types.Message, state: FSMContext):
    await state.clear()
    plant_buttons = [[KeyboardButton(text=plant)] for plant in plants]
    plant_buttons.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")])
    if plants:
        plant_buttons.append([KeyboardButton(text="üß† GigaChat")])
    plant_buttons.append([KeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    plants_menu = ReplyKeyboardMarkup(
        keyboard=plant_buttons,
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=plants_menu)

@dp.message(lambda message: message.text == "üß† GigaChat")
async def gigachat_callback(message: types.Message, state: FSMContext):
    if not plants:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
        return

    plant_buttons = [[KeyboardButton(text=plant)] for plant in plants]
    plant_buttons.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")])

    plant_menu = ReplyKeyboardMarkup(keyboard=plant_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:", reply_markup=plant_menu)
    await state.set_state(PlantState.asking_gigachat)


@dp.message(PlantState.asking_gigachat)
async def ask_gigachat_question(message: types.Message, state: FSMContext):
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await plant_catalog(message, state)
        return

    if message.text not in plants:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(selected_plant=message.text)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏:")
    await state.set_state(PlantState.gigachat_question)

def format_gigachat_response(response: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat, –∑–∞–º–µ–Ω—è—è Markdown –Ω–∞ HTML."""
    response = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", response)  # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
    response = response.replace("\n", "\n\n")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    return response

@dp.message(PlantState.gigachat_question)
async def send_gigachat_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    plant_name = data.get("selected_plant")

    if not plant_name or plant_name not in plants:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
        await state.clear()
        return

    plant_info = plants[plant_name]
    question = message.text

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è GigaChat
    prompt = (
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º '{plant_name}'. "
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {plant_info.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}. "
        f"–û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: {plant_info.get('location', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')}. "
        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}"
    )

    try:
        # üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat
        response = giga.chat(prompt)
        gigachat_response = response.choices[0].message.content

        # üîπ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_gigachat_response(gigachat_response)
        await message.answer(f"ü§ñ <b>GigaChat –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{formatted_response}", parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GigaChat: {str(e)}")

    await state.clear()

@dp.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=main_menu)

@dp.message(lambda message: message.text == "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=main_menu)



@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
async def add_plant(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
    await state.set_state(PlantState.name)


@dp.message(PlantState.name)
async def plant_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
    await state.set_state(PlantState.description)


@dp.message(PlantState.description)
async def plant_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞—Å—Ç–µ–Ω–∏–µ?")
    await state.set_state(PlantState.location)


@dp.message(PlantState.location)
async def plant_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    plants[data["name"]] = {
        "description": data["description"],
        "location": message.text
    }
    await message.answer(f"–†–∞—Å—Ç–µ–Ω–∏–µ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—é '{data['name']}', —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GigaChat –≤ –ø—É–Ω–∫—Ç–µ\n<b>üå± –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π</b>!", reply_markup=main_menu, parse_mode="HTML")
    await state.clear()


@dp.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
async def delete_plant(message: types.Message, state: FSMContext):
    if not plants:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø—É—Å—Ç.")
        return

    delete_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=plant)] for plant in plants] + [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
                                                                       [KeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_kb)
    await state.set_state(PlantState.deleting)


@dp.message(PlantState.deleting)
async def confirm_delete_plant(message: types.Message, state: FSMContext):
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await plant_catalog(message, state)
        return
    if message.text == "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text in plants:
        del plants[message.text]
        await message.answer(f"–†–∞—Å—Ç–µ–Ω–∏–µ '{message.text}' —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_menu)
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

    await state.clear()


@dp.message(lambda message: message.text in plants)
async def show_plant_info(message: types.Message):
    plant_info = plants[message.text]
    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß† –°–ø—Ä–æ—Å–∏—Ç—å —É GigaChat", callback_data="gigachat")]
        ]
    ) if plants else None
    await message.answer(
        f"üå± <b>{message.text}</b>\nüìñ {plant_info['description']}\nüìç –ù–∞—Ö–æ–¥–∏—Ç—Å—è: {plant_info['location']}",
        parse_mode="HTML", reply_markup=buttons)

@dp.callback_query(lambda call: call.data == "gigachat")
async def gigachat_callback(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    plant_name = None
    lines = call.message.text.split("\n")
    if lines and lines[0].startswith("üå±"):
        plant_name = lines[0].replace("üå± ", "").strip()

    if not plant_name:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ.", show_alert=True)
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    normalized_plant_name = plant_name.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    matching_plant = next((name for name in plants if name.lower().strip() == normalized_plant_name), None)

    if not matching_plant:
        await call.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_plant=matching_plant)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    await call.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—é <b>{matching_plant}</b>:", parse_mode="HTML")
    await state.set_state(PlantState.gigachat_question)

@dp.message(lambda message: message.text == "‚Ñπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def additional_info_menu(message: types.Message):
    submenu = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ñ AI –≤ –ø—Ä–æ–µ–∫—Ç–µ")],
            [KeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")],
            [KeyboardButton(text="üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ —Ä–µ—Å—É—Ä—Å–æ–≤")],
            [KeyboardButton(text="üé¨ –ó–∞–∫—É–ª–∏—Å—å–µ, —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º")],
            [KeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:", reply_markup=submenu)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
additional_info = {
    "ü§ñ AI –≤ –ø—Ä–æ–µ–∫—Ç–µ": [
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.29.27.png",
            "text": (
                "ü§ñ <b>GigaChat ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "üîπ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.\n"
                "üîπ –ü–æ–Ω–∏–º–∞–µ—Ç –æ –∫–∞–∫–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏ –∏–¥—ë—Ç —Ä–µ—á—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –≤–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
                "üîπ –ü–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ä–∞–±–æ—Ç—ã –≥–∏–¥—Ä–æ–ø–æ–Ω–∏–∫–∏.\n\n"
                "üí° –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–µ–ª–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º!"
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.29.39.png",
            "text": (
                "üß† <b>PlantML: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
                "üì∏ –ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞.\n"
                "üî¨ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å.\n"
                "üåø –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π —É—Ö–æ–¥–∞."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.29.47.png",
            "text": (
                "üìä <b>DiseaseML: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π</b>\n\n"
                "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ª–∏—Å—Ç—å–µ–≤ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.\n"
                "üíä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏.\n"
                "üõ°Ô∏è –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —É—Ä–æ–∂–∞—è.\n"
                "‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø. –º–æ–¥—É–ª—å –ö–∞–º–µ—Ä–∞"
            ),
        },
    ],
    "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç": [
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.30.53.png",
            "text": (
                "üí∞ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (HPFS –±–µ–∑ –º–æ–¥—É–ª–µ–π)</b>\n\n"
                "üîß –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä–ø—É—Å, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å.\n"
                "üìä –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.31.07.png",
            "text": (
                "üìà <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π</b>\n\n"
                "üîπ –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è.\n"
                "üîπ –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –º–æ–¥—É–ª–µ–π –Ω–∞ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞.\n"
                "üí° –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.31.19.png",
            "text": (
                "üìä <b>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å</b>\n\n"
                "üîç –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å.\n"
                "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏\n"
                "üìà –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è"
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.31.32.png",
            "text": (
                "üìå <b>–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
                "üîπ –ü–æ–¥—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã.\n"
            ),
        },
    ],
    "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ —Ä–µ—Å—É—Ä—Å–æ–≤": [
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.35.01.png",
            "text": (
                "üõ†Ô∏è <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç —Å –¥–∞—Ç–∞–º–∏</b>\n\n"
                "üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                "üîß –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.35.08.png",
            "text": (
                "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n\n"
                "üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ\n"
                "üîπ –û—Ü–µ–Ω–∫–∞ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.35.16.png",
            "text": (
                "üîß <b>–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç (–ß–∞—Å—Ç—å 1)</b>\n\n"
                "üìå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.35.23.png",
            "text": (
                "üìà <b>–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç (–ß–∞—Å—Ç—å 2)</b>\n\n"
                "üî¨ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∂ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ."
            ),
        },
    ],
    "üé¨ –ó–∞–∫—É–ª–∏—Å—å–µ, —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º": [
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.36.14.png",
            "text": (
                "üé¨ <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–∞–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</b>\n\n"
                "üìå –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º, –ø–æ–¥–±–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n"
                "üìå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç—ã"
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.36.26.png",
            "text": (
                "üî¨ <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
                "üì± –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç—Ñ–æ–Ω."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.36.36.png",
            "text": (
                "üìå <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—ã</b>\n\n"
                "üîß –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º –≤ EasyEDA, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
            ),
        },
        {
            "photo": "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-02-22 –≤ 21.36.51.png",
            "text": (
                "‚ú® <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–µ–π</b>\n\n"
                "üß† –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –∏—Ö –±–æ–ª–µ–∑–Ω–µ–π.\n"
                "üí° –£–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            ),
        },
    ]
}


@dp.message(lambda message: message.text in additional_info)
async def send_additional_info(message: types.Message, state: FSMContext):
    await state.set_state(InfoState.page)
    await state.update_data(page=0, topic=message.text)

    data = additional_info[message.text][0]
    photo = types.FSInputFile(data["photo"])

    navigation_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="previ"),
             InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="nexti")]
        ]
    )

    await message.answer_photo(photo, caption=data["text"], reply_markup=navigation_kb, parse_mode="HTML")

@dp.callback_query(lambda call: call.data in ["previ", "nexti"])
async def paginate_additional_info(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get("page", 0)
    topic = data.get("topic", "")

    if topic not in additional_info:
        await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if call.data == "nexti":
        page = (page + 1) % len(additional_info[topic])
    else:
        page = (page - 1) % len(additional_info[topic])

    await state.update_data(page=page)
    new_data = additional_info[topic][page]
    photo = types.FSInputFile(new_data["photo"])

    await call.message.edit_media(InputMediaPhoto(media=photo, caption=new_data["text"], parse_mode="HTML"), reply_markup=call.message.reply_markup)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))